plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
    id 'org.sonarqube'
}

android {
    namespace 'at.aau.edu.wizards'
    compileSdk 33

    defaultConfig {
        applicationId "at.aau.edu.wizards"
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            finalizedBy jacocoTestReport
        }
    }

    buildFeatures {
        viewBinding = true
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    reports {
        xml.enabled true
        xml.destination file("${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml")
    }

    // https://medium.com/nerd-for-tech/setup-jacoco-code-coverage-with-your-multimodule-android-app-kotlin-a0f82573a1
    def fileFilter = [
            // exclude ui
            '**/*Adapter.*',
            '**/*Activity.*',
            '**/*Fragment.*',
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/databinding/*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
    ]
    def javaTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def kotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([javaTree, kotlinTree])
    executionData.from = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

sonarqube {
    properties {
        property "sonar.projectKey", "lechld_Wizard"
        property "sonar.organization", "lechld"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

dependencies {
    // Just typical standard dependencies
    implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // https://github.com/Kotlin/kotlinx.coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    // https://developer.android.com/jetpack/androidx/releases/lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.6.1"
    implementation "androidx.lifecycle:lifecycle-common:2.6.1"

    // https://developer.android.com/jetpack/androidx/releases/activity
    implementation "androidx.activity:activity-ktx:1.7.1"

    // https://developer.android.com/jetpack/androidx/releases/fragment
    implementation "androidx.fragment:fragment-ktx:1.5.7"

    // https://developer.android.com/guide/navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.3"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.3"

    // https://developer.android.com/jetpack/androidx/releases/recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.3.0'

    // https://developers.google.com/nearby
    implementation 'com.google.android.gms:play-services-nearby:18.5.0'
    implementation 'androidx.test:monitor:1.6.1'

    // https://github.com/junit-team/junit5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // https://github.com/mockito/mockito-kotlin
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.1.0'

    // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'

    // https://developer.android.com/jetpack/androidx/releases/lifecycle
    testImplementation 'androidx.lifecycle:lifecycle-runtime-testing:2.6.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
}